KMD
00000000: EA00000E    ;                 B       test_strcpy
00000004:             ; 
00000004: 48 65 6C 6C ; tsc_string      DEFB    "Hello World",0
00000008: 6F 20 57 6F ; 
0000000C: 72 6C 64 00 ; 
00000010: 23 23 23 23 ; tsc_dest        DEFB    "###########################",0
00000014: 23 23 23 23 ; 
00000018: 23 23 23 23 ; 
0000001C: 23 23 23 23 ; 
00000020: 23 23 23 23 ; 
00000024: 23 23 23 23 ; 
00000028: 23 23 23 00 ; 
0000002C: 43 6F 70 69 ; tsc_copied      DEFB    "Copied '",0
00000030: 65 64 20 27 ; 
00000034: 00          ; 
00000035: 27 20 74 6F ; tsc_to          DEFB    "' to '",0
00000039: 20 27 00    ; 
0000003C: 27 0A 00    ; tsc_eol         DEFB    "'\n",0
00000040:             ;                 ALIGN
00000040:             ; 
00000040:             ; ;; Test initial implementation
00000040:             ; test_strcpy
00000040: E3A0D801    ;                 MOV             R13,#0x10000
00000044:             ; 
00000044: E24F003C    ;                 ADRL    R0,tsc_dest
00000048: E24F104C    ;                 ADRL    R1,tsc_string
0000004C: EB00000A    ;                 BL              strcpy
00000050:             ; 
00000050: E24F002C    ;                 ADRL    R0,tsc_copied
00000054: EF000003    ;                 SWI             3
00000058:             ; 
00000058: E24F005C    ;                 ADRL    R0,tsc_string
0000005C: EF000003    ;                 SWI             3
00000060:             ; 
00000060: E24F0033    ;                 ADRL    R0,tsc_to
00000064: EF000003    ;                 SWI             3
00000068:             ; 
00000068: E24F0060    ;                 ADRL    R0,tsc_dest
0000006C: EF000003    ;                 SWI             3
00000070:             ; 
00000070: E24F003C    ;                 ADRL    R0,tsc_eol
00000074: EF000003    ;                 SWI             3
00000078:             ; 
00000078: EF000002    ;                 SWI             2
0000007C:             ; 
0000007C:             ; 
0000007C:             ; ;; strcpy -- copy the string at R1 to the address at R0
0000007C:             ; ;; R0 <--- destination
0000007C:             ; ;; R1 <--- source
0000007C:             ; 
0000007C:             ; strcpy
0000007C:             ;         ; load each byte sequentially then store at new address, incrementing
0000007C:             ;         ; the address for each character, until zero byte at the end is 
0000007C:             ;         ; reached (but still copied)
0000007C:             ; 
0000007C:             ; mainStrLoop
0000007C: E4D12001    ;         LDRB R2, [R1], #1 ; post increment the value in R1 by 1
00000080: E4C02001    ;         STRB R2, [R0], #1
00000084:             ; 
00000084:             ;         ; and if it's zero, quit        
00000084: E3520000    ;         CMP R2, #0
00000088: 0A000000    ;         BEQ stopCopying 
0000008C:             ; 
0000008C:             ;         ; else, continue
0000008C: EAFFFFFA    ;         B mainStrLoop
00000090:             ; 
00000090:             ; 
00000090:             ; 
00000090:             ; stopCopying
00000090:             ;         ; if the zero is hit, we BL back
00000090: E1A0F00E    ;         MOV PC, R14

Symbol Table: Labels
: tsc_string                        00000004  Local -- ARM
: tsc_dest                          00000010  Local -- ARM
: tsc_copied                        0000002C  Local -- ARM
: tsc_to                            00000035  Local -- ARM
: tsc_eol                           0000003C  Local -- ARM
: test_strcpy                       00000040  Local -- ARM
: strcpy                            0000007C  Local -- ARM
: mainStrLoop                       0000007C  Local -- ARM
: stopCopying                       00000090  Local -- ARM
